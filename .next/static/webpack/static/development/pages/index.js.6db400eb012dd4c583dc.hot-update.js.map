{"version":3,"file":"static/webpack/static/development/pages/index.js.6db400eb012dd4c583dc.hot-update.js","sources":["webpack:///./components/Messenger.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\n\nimport { addMessage } from '../actions/message';\nimport { addHouse } from '../actions/message';\nimport Message from './Message';\nimport NavBar from './NavBar';\n\nconst generateName = () => {\n  const getRandomInt = (min, max) =>\n    Math.floor(Math.random() * (max - min)) + min;\n  const firstName = [\n    'Jack',\n    'Steven',\n    'Brian',\n    'Marc',\n    'Drew',\n    'Stephanie',\n    'Daniel',\n    'James',\n    'Spencer',\n    'Caitlin',\n    'Jackie',\n    'Julius',\n    'Patrick',\n  ];\n  const lastName = [\n    'Li',\n    'Chung',\n    'Tiosejo',\n    'Louie',\n    'Curtis',\n    'Sockwell',\n    'Jiang',\n    'Bykowsky',\n    'Detro',\n    'Chen',\n    'Sea',\n    'Doyle',\n  ];\n  const name =\n    firstName[getRandomInt(0, firstName.length)] +\n    ' ' +\n    lastName[getRandomInt(0, lastName.length)];\n  return name\n};\n\nclass Messenger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      messages: [],\n      username: generateName(),\n      updated: false,\n      currentConvo: '',\n    }\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n    if (!this.state.messages.length && !this.state.updated) {\n      const filtered = this.state.currentConvo !== '' ? this.props.messages.filter(message => (message.username === this.state.currentConvo)) : this.state.messages;\n      this.setState({ messages: filtered, updated: true })\n    }\n  }\n\n  componentDidMount() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('message', this.handleMessage);\n    setTimeout(this.scrollToBottom, 100)\n  }\n\n  componentWillUnmount() {\n    this.socket.off('message', this.handleMessage);\n    this.socket.close()\n  }\n\n  handleMessage = message => {\n    this.setState(state => ({ messages: state.messages.concat(message) }));\n    this.props.addMessage(message.text, message.username, message.created_at)\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const message = {\n      created_at: new Date().getTime(),\n      username: this.state.username,\n      text: this.state.text,\n    };\n\n    this.socket.emit('message', message);\n\n    this.props.addMessage(\n      this.state.text,\n      this.state.username,\n      message.created_at,\n    );\n    this.setState(state => ({\n      text: '',\n      messages: this.state.messages.concat(message),\n    }))\n  };\n\n  scrollToBottom = () => {\n    this.el.scrollIntoView({ behavior: 'instant' })\n  };\n\n  handleChange = e => {\n    this.setState({ username: e.target.value })\n  };\n\n  render() {\n    const sameUser = (msg, i, arr) => {\n      return i > 0 && msg.username === arr[i - 1].username\n    };\n\n    // let allMessages = this.props.messages.concat(this.state.messages);\n    // allMessages.sort((a, b) => b.createdAt - a.createdAt);\n    return (\n      <React.Fragment>\n\n        <input\n          type=\"text\"\n          onChange={this.handleChange}\n          placeholder={'enter username'}\n        />\n        <div className=\"mdl-card mdl-shadow--2dp\" id=\"chatview\">\n                <NavBar />\n\n          <ul>\n            {/*{this.props.messages.map((message, i, array) => (*/}\n            {/*<Message key={i} message={message} username={this.state.username} firstMessage={sameUser(message, i, array)}/>*/}\n            {/*))}*/}\n            {this.state.messages.map((message, i, array) => (\n              <Message\n                key={i}\n                message={message}\n                username={this.state.username}\n                firstMessage={sameUser(message, i, array)}\n              />\n            ))}\n            <div\n              ref={el => {\n                this.el = el;\n              }}\n            />\n          </ul>\n          <form onSubmit={this.handleSubmit} autoComplete=\"off\">\n            <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n              <input\n                type=\"text\"\n                value={this.state.text}\n                onChange={e => this.setState({ text: e.target.value })}\n                className=\"mdl-textfield__input\"\n                id=\"message-input\"\n                placeholder={'Send a message'}\n              />\n              <label className=\"mdl-textfield__label\" htmlFor=\"message-input\" />\n            </div>\n          </form>\n          <style>{`\n\t\t\t\t\t\t#message-input {\n\t\t\t\t\t\tborder-bottom: lightgray solid 1px;\n\t\t\t\t\t\tborder-top: lightgray solid 1px;\n\t\t\t\t\t\theight: 20px;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tform {\n\t\t\t\t\t\t\tbackground: #fff;\n\t\t\t\t\t\t\tpadding: 0px 10px 0px 10px;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tul {\n\t\t\t\t\t\t\theight: 480px;\n\t\t\t\t\t\t\tmargin: 0;\n\t\t\t\t\t\t\tpadding: 0;\n\t\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\t\tlist-style: none;\n\t\t\t\t\t\t\toverflow-y: scroll;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tul li {\n\t\t\t\t\t\t\tpadding: 1px;\n\t\t\t\t\t\t\tbackground: #FFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.mdl-card {\n\t\t\t\t\t\t\tmargin: auto;\n\t\t\t\t\t\t\ttransition: all .3s;\n\t\t\t\t\t\t\ttransform: translateY(100px);\n\t\t\t\t\t\t\tmin-height: 500px;\n\t\t\t\t\t\t\tmax-height: 500px;\n\t\t\t\t\t\t}\n\t\t\t\t\t`}</style>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default connect(\n  ({ messages, houses }) => ({ messages, houses }),\n  { addMessage , addHouse},\n)(Messenger)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAeA;AAcA;AAIA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAlCA;AAoCA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AAxDA;AA0DA;AAAA;AAAA;AACA;AACA;AA5DA;AA8DA;AAAA;AAAA;AACA;AACA;AA9DA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAqCA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AADA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAoCA;;;;AApJA;AACA;AAsJA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;;;A","sourceRoot":""}