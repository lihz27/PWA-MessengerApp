{"version":3,"file":"static/webpack/static/development/pages/messenger.js.528bb64c89ee4fff1ed4.hot-update.js","sources":["webpack:///./components/Messenger.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client';\nimport { addMessage } from '../actions/message';\nimport Message from './Message';\nimport NavBar from './NavBar';\nimport Favorites from './Favorites';\nimport { DropTarget } from 'react-drag-drop-container';\n\n\nclass Messenger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      messages: [],\n      updated: false,\n      currentConvo: '',\n      friends: new Set(),\n      typing: [],\n      otherNewMessage: false,\n    };\n  }\n\n  componentDidUpdate() {\n    this.username = this.props.user.username;\n    this.scrollToBottom();\n    if (!this.state.messages.length && !this.state.updated) {\n      this.setState((state) => {\n        this.props.messages.forEach((msg) => {\n          state.friends.add(msg.username);\n        });\n        return state;\n      });\n      const filtered = this.state.currentConvo !== ''\n        ? this.props.messages.filter(\n          message => message.username === this.state.currentConvo,\n        )\n        : this.props.messages.filter(message => message.username === this.props.messages.slice(-1)[0]);\n      this.setState({\n        messages: filtered,\n        updated: true\n      });\n    }\n  }\n\n  componentDidMount() {\n    const connectSocket = () => {\n      const {username, password} = this.props.user;\n      this.socket = io('http://localhost:3000');\n      this.socket.on('connect', () => {\n        this.socket.emit('authentication', { username, password });\n      });\n      this.socket.on('message', this.handleMessage);\n      this.socket.on('typing', this.typingStatus);\n      this.socket.on('noexist', this.noUserExists);\n      this.socket.emit('login', username);\n    };\n    setTimeout(connectSocket, 100);\n    setTimeout(this.scrollToBottom, 100);\n  }\n\n  componentWillUnmount() {\n    //TODO do we want this to shut off when you navigate away from messenger?\n    //this works current if user goes back to browser\n    //TODO seems like we want to receive messages still\n    // this.socket.off('message', this.handleMessage);\n    // this.socket.close();\n  }\n\n\n  handleMessage = (message) => {\n    this.setState(state => ({\n      typing: state.typing.filter(\n        ({ username }) => username !== message.username,\n      ),\n    }));\n    this.setState(state => state.friends.add(message.username));\n    if (message.username === this.state.currentConvo) {\n      this.setState(state => ({ messages: state.messages.concat(message) }));\n    } else {\n      this.setState({otherNewMessage: true});\n    }\n    this.props.addMessage(message.text, message.username, message.messageType, message.created_at);\n  };\n\n  noUserExists = () => {\n    alert('User by that name does not exist');\n  };\n\n\n  typingStatus = (data) => {\n    if (data === this.state.currentConvo) {\n      const notIncluded = this.state.typing.filter(el => el.username !== data);\n      for (let i = 0, len = this.state.typing.length; i < len; ++i) {\n        if (this.state.typing[i].username === data) {\n          clearTimeout(this.state.typing[i].timeoutId);\n        }\n      }\n      const timeoutId = setTimeout(() => {\n        this.setState(state => ({\n          typing: state.typing.filter(el => el.username !== data),\n        }));\n      }, 3000);\n      const status = { username: data, timeoutId };\n      this.setState(state => ({ typing: [...notIncluded, status] }));\n    }\n  };\n\n  getCurrentConvo = (otherUser) => {\n    this.setState(() => {\n      const filtered = this.props.messages.filter(\n        message => message.username === otherUser\n          || (message.username === this.username && message.recipients.includes(otherUser)),\n      );\n      return {\n        currentConvo: otherUser,\n        messages: filtered,\n      };\n    });\n  };\n\n  addConversation = async () => {\n    const username = await prompt('enter a username');\n    this.setState({currentConvo: username}, () => {\n      this.getCurrentConvo(username);\n    })\n  };\n\n\n  showTypingStatus = (e) => {\n    const typingStatus = {\n      username: this.username,\n      recipients: [this.state.currentConvo],\n    };\n      this.socket.emit('typing', typingStatus);\n      this.setState({ text: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.state.text !== '') {\n      const message = {\n        created_at: new Date().getTime(),\n        username: this.username,\n        text: this.state.text,\n        messageType: 'text',\n        recipients: [this.state.currentConvo],\n      };\n\n      this.socket.emit('message', message);\n\n      //TODO THIS ADDS TO PROPS\n      this.props.addMessage(\n        this.state.text,\n        'text',\n        this.username,\n        message.created_at,\n        [this.state.currentConvo],\n      );\n      this.setState(state => ({\n        text: '',\n        messages: this.state.messages.concat(message),\n      }));\n    }\n  };\n\n  scrollToBottom = () => {\n    if (this.el) {\n      this.el.scrollIntoView({ behavior: 'instant' });\n    }\n  };\n\n  shareFavorite = (arrayIdx) => {\n    const message = {\n      created_at: new Date().getTime(),\n      username: this.username,\n      text: [arrayIdx, this.props.houses[arrayIdx].imgUrl],\n      messageType: 'link',\n      recipients: [this.state.currentConvo],\n    };\n    this.props.addMessage(\n      message.text,\n      message.messageType,\n      message.username,\n      message.created_at,\n      message.recipients)\n    this.setState(state => {\n      state.messages = [...this.state.messages, message];\n      return state;\n    })\n  };\n\n  render() {\n    const sameUser = (msg, i, arr) => i > 0 && msg.username === arr[i - 1].username;\n    const typingStatusMessage = !this.state.typing.length\n      ? ''\n      : this.state.typing.length === 1\n        ? `${this.state.typing[0].username} is typing...`\n        : this.state.typing.length === 2\n          ? `${this.state.typing[0].username} and ${\n            this.state.typing[1].username\n          } are typing...`\n          : 'several people are typing';\n    return (\n      <div className=\"mdl-card mdl-shadow--2dp\" id=\"chatview\">\n        <Favorites\n          shareFavorite={this.shareFavorite}\n        />\n        <NavBar\n          newMessage={this.state.otherNewMessage}\n          currentChat={this.state.currentConvo}\n          addConvo={this.addConversation}\n          getConvo={this.getCurrentConvo}\n          friends={[...this.state.friends].filter(notUser => notUser !== this.username && notUser !== this.state.currentConvo)}\n        />\n        <DropTarget\n          targetKey='fav'\n        >\n        <ul>\n          {this.state.messages.map((message, i, array) => (\n            <Message\n              key={i}\n              message={message}\n              username={this.username}\n              firstMessage={sameUser(message, i, array)}\n            />\n              ))}\n          <div\n            ref={(el) => {\n                  this.el = el;\n                }}\n          />\n        </ul>\n        </DropTarget>\n        <div id=\"typing-status\">\n          <i>{typingStatusMessage}</i>\n        </div>\n        <form onSubmit={this.handleSubmit} autoComplete=\"off\">\n          <div className=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n            <input\n              type=\"text\"\n              value={this.state.text}\n              onChange={this.showTypingStatus}\n              className=\"mdl-textfield__input\"\n              id=\"message-input\"\n              placeholder=\"Send a message\"\n            />\n\n            <span onClick={this.handleSubmit}>\n              <i className=\"far fa-comment\" />\n            </span>\n\n            <label className=\"mdl-textfield__label\" htmlFor=\"message-input\" />\n          </div>\n        </form>\n        <style>\n          {`\n            .droptarget {\n              height: 440px;\n            }\n            #chatview {\n              width: 320px;\n              height: 568px;\n            }\n            #typing-status {\n              height: 2.4em;\n              font-size: .7em;\n            }\n            #message-input {\n              border-bottom: lightgray solid 1px;\n              border-top: lightgray solid 1px;\n              height: 20px;\n            }\n            form {\n              background: #fff;\n              padding: 0px 10px 0px 10px;\n            }\n            ul {\n              position: relative;\n              top:0.5em;\n              height: 350px;\n              margin: 0;\n              padding: 0;\n              text-align: left;\n              list-style: none;\n              overflow-y: scroll;\n            }\n            ul li {\n              padding: 1px;\n              background: #FFF;\n            }\n            .mdl-card {\n              margin: auto;\n              transition: all .3s;\n              // transform: translateY(100px);\n            }\n            .mdl-textfield__input {\n              display:inline-block;\n              width: 90%;\n              padding-top: .5em;\n            }\n            .timestamp{\n              font-size:10px;\n              font-weight: 300;\n              color: transparent;\n              margin: 3px;\n            }\n            li:hover .my-timestamp {\n              color: black;\n              transition: color .8s;\n            }\n            li:hover .timestamp {\n              color: black;\n              transition: color .8s;\n            }\n          .my-message {\n            display: inline-block;\n            font-weight: 400;\n            background: #00e34d;\n            color: white;\n            border-radius: 10px;\n            padding: 7px;\n            max-width: 50%;\n            word-wrap: break-word;\n            clear: right;\n            line-height: 1.25;\n          }\n          .your-message {\n            display: inline-block;\n            background: #E5E5EA;\n            border-radius: 10px;\n            padding: 7px;\n            word-wrap: break-word;\n            max-width:70%;\n            line-height: 1.25;\n          }\n          .message-username {\n            display: block;\n            font-size: 0.8em;\n            font-weight: bold;\n            line-height: 1.5;\n            margin-left: 0.6em;\n          }\n          .send-msg-btn {\n            cursor:pointer;\n          }\n          .mdl-textfield__label:after{\n            background-color: #0069E0;\n          }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  ({ messages, houses, user }) => ({ messages, houses, user }),\n  { addMessage },\n)(Messenger);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA6DA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AA1EA;AA4EA;AACA;AACA;AA9EA;AAiFA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAjGA;AAmGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AA9GA;AAAA;AAAA;AAAA;AAAA;AA+GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhHA;AAwHA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA/HA;AAiIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AACA;AA5JA;AA8JA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAlKA;AAoKA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AApLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAFA;AAWA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AA8HA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AASA;AACA;AAAA;AAAA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AADA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AAHA;AAOA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAqGA;;;;AAzVA;AACA;AA2VA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;A","sourceRoot":""}